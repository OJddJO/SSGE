on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true

name: Release new version

jobs:
  build:
    name: Build and Package
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    env:
      VERSION: ${{ github.event.inputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up build tools (Windows)
        if : runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >
            mingw-w64-x86_64-toolchain
            make
            mingw-w64-x86_64-zip

      - name: Set up build tools (Ubuntu)
        if : runner.os == 'Linux'
        run: sudo apt-get install build-essential libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev libsdl2-mixer-dev -yq

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: make
        shell: bash

      - name: Build (Ubuntu)
        if: runner.os == 'Linux'
        run: make

      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p release
          rm -rf _windows/build/ _windows/build_static/
          zip -r "release/${VERSION}-windows.zip" _windows/* include/ README.md LICENSE
        shell: bash

      - name: Package artifacts (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          mkdir -p release
          rm -rf _linux/build/ _linux/build_static/
          tar -czvf "release/${VERSION}-linux.tar.gz" _linux/* include/ README.md LICENSE

      - name: Upload package artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: release/${{ env.VERSION }}-windows.zip

      - name: Upload package artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-package
          path: release/${{ env.VERSION }}-linux.tar.gz

  publish:
    name: Create Release and upload assets
    runs-on: ubuntu-latest
    needs: build
    env:
      VERSION: ${{ github.event.inputs.version }}
    steps:
      - name: Download Linux package
        uses: actions/download-artifact@v3
        with:
          name: linux-package
          path: ./downloaded

      - name: Download Windows package
        uses: actions/download-artifact@v3
        with:
          name: windows-package
          path: ./downloaded

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Linux asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded/${{ env.VERSION }}-linux.tar.gz
          asset_name: ${{ env.VERSION }}-linux.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded/${{ env.VERSION }}-windows.zip
          asset_name: ${{ env.VERSION }}-windows.zip
          asset_content_type: application/zip